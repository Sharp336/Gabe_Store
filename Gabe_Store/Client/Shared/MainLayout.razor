@using System.Text;
@using System.Security.Claims;
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>

    <MudAppBar Elevation="1">

        <MudText @onclick='() => GoTo("/")' Typo="Typo.h4">GayBE Store</MudText>

        <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick='() => TryAdjustUserBalance(10)'>+10</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick='() => TryAdjustUserBalance(-10)'>-10</MudButton>
        <MudSpacer />

        <MudPaper Class="pa-2 border-3">Balance: @balance</MudPaper>
        <AuthorizeView>
            <Authorized>
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="Logout">Logout</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick='() => GoTo("login")'>Login</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick='() => GoTo("register")' Style="margin-left: 20px">Register</MudButton>
            </NotAuthorized>
        </AuthorizeView>

    </MudAppBar>

    

    <MudMainContent >

        @Body

    </MudMainContent>

</MudLayout>




@code{
    private string balance = String.Empty;

    public void Bebroid(Task<AuthenticationState> task)
    {
        var brusko = task.Result.User.Claims.SingleOrDefault(clm => clm.Type == ClaimTypes.UserData);
        if (brusko is not null)
            balance = brusko.Value;


        Console.WriteLine(brusko);

        StateHasChanged();
    }



    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChanged += Bebroid;
    }

    void GoTo(string path)
    {
        NavigationManager.NavigateTo(path);
    }

    async void TryAdjustUserBalance(int amount)
    {
        var rresult = await Http.PostAsJsonAsync("api/Goods/TryAdjustUserBalance", new UserLoginDto(){Password = amount.ToString()});
        Console.WriteLine($"Balanc adjustment result is {rresult.StatusCode}");
        var result = await Http.GetAsync("api/Auth/refresh-token");
        if (result.IsSuccessStatusCode)
        {
            var token = await result.Content.ReadAsStringAsync();
            Console.WriteLine(token);
            await LocalStorage.SetItemAsync("token", token);
            await AuthStateProvider.GetAuthenticationStateAsync();
        }
    }


    async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("token");
        await AuthStateProvider.GetAuthenticationStateAsync();
        GoTo("/");
    }
    bool open = true;

    void ToggleDrawer()
    {
        open = !open;
    }


}