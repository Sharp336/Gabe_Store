@page "/"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject GoodsProvider _goodsProvider
@inject IDialogService Dialog
@using System.Security.Claims;
@using System.Text;

<PageTitle>GayBE</PageTitle>

<MudContainer Style="margin-top:1vh">


    <AuthorizeView Roles="Seller">
        <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Secondary" @onclick='() => AddGood()'>Add</MudButton>
    </AuthorizeView>

    <MudGrid Style="margin-top:2vh">
        @foreach (GoodPublicDto g in localGoodsStorage)
        {
            <MudItem Style="border-width: 3px; border-color: slategray;" Class="flex-column">
                <MudText>Good name - @g.Name</MudText>
                <MudText>Description - @g.Description</MudText>
                <MudText>Seller - @g.SellerName</MudText>
                <MudText>Launcher - @g.Launcher.ToString()</MudText>
                <MudText>Price - @g.Price.ToString()</MudText>

                @if (true)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick='() => DeleteGoodById(g.Id)' Style="margin-left: 20px">Delete</MudButton>
                }
            </MudItem>
        }
    </MudGrid>

</MudContainer>


@code {

    List<GoodPublicDto> localGoodsStorage = new();

    string currentUser = String.Empty;

    public void UsernameCheckOnAuthStateChanged(Task<AuthenticationState> task)
    {
        var tokenEncodedUsername = task.Result.User.Claims.SingleOrDefault(clm => clm.Type == ClaimTypes.Name);
        if (tokenEncodedUsername is not null)
            currentUser = tokenEncodedUsername.Value;
        StateHasChanged();
    }



    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChanged += UsernameCheckOnAuthStateChanged;
    }


    protected override async void OnParametersSet() => ReloadGoods();

    async void AddGood()
    {
        await (await Dialog.ShowAsync<AddGoodDialog>("Add good", new DialogOptions() { NoHeader = true })).Result;
        ReloadGoods();
    }

    async void DeleteGoodById(int id)
    {
        var result = await Http.PostAsJsonAsync("api/Goods/delete_by_id", new IntegerDto(){Value = id});
        ReloadGoods();
    }

    async void ReloadGoods()
    {
        var result = await Http.GetAsync("api/Goods/get_all");
        if (result.IsSuccessStatusCode)
        {
            localGoodsStorage = await result.Content.ReadFromJsonAsync<List<GoodPublicDto>>();
        }
        var cancer = new StringBuilder();
        foreach(var cal in localGoodsStorage)
        {
            cancer.Append(cal.SellerName);
            cancer.Append(" - ");
        }
        StateHasChanged();
    }
}